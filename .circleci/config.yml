version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name frontend-<<workflow-id>>
            aws cloudformation delete-stack --stack-name backend-<<workflow-id>>

      - revert-migrations:
          workflow_id: <<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            status=$(curl --insecure --request GET https://kvdb.io/Pi4Ly4ktw7LcDJDRuaQtMn/migration-<<parameters.workflow_id>>)
            echo $status
            if [[ "${status}" == 1 ]]; then
              npm run migrations:revert
            fi

orbs:
  aws-s3: circleci/aws-s3@3.0
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-node_modules]
      - run: 
          name: install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end 
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-node_modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-node_modules]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-node_modules]
      - run:
          name: Scan front-end
          command: | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-node_modules]
      - run: 
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build back-end
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-node_modules

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-node_modules]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-node_modules]
      - run:
          name: Scan backend-end
          command: | 
            cd backend
            npm update
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --region=us-east-2 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --region=us-east-2 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [cf:08:97:6a:61:c9:84:68:f7:bd:63:ea:f6:cb:7e:54]
      - attach_workspace: #Attach the "workspace" to the job so that you have access to all the files you need (e.g. inventory file).
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-node_modules]
      - run: 
          name: Install aws cli for destroy env command
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            cat migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            result=0
            if grep -q "has been executed successfully." ~/project/backend/migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            then
              result=1
            fi

            curl --insecure \
            --data ${result} \
            https://kvdb.io/Pi4Ly4ktw7LcDJDRuaQtMn/migration_${CIRCLE_WORKFLOW_ID:0:7}

            echo ${result}
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install job dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y update
            sudo apt -y install curl tar gzip
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "BACK IP: ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "${AWS_DEFAULT_REGION}"
            echo API_URL="http://${BACKEND_IP}:3030" >> .env
      - run:
          name: Install back dependencies
          command: |
            cd frontend
            npm install
            npm run build
            cat ./dist/index.html
      
      - run:
          name: copy local files to s3
          command: |
            aws s3 cp ~/project/frontend/dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"
      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cf:08:97:6a:61:c9:84:68:f7:bd:63:ea:f6:cb:7e:54"]
      - restore_cache:
          keys: [backend-build]
      - attach_workspace: #Attach the "workspace" to the job so that you have access to all the files you need (e.g. inventory file).
          at: ~/
      - run:
          name: install job dependencies
          command: |
            pip3 install --upgrade pip
            pip3 install --no-cache-dir awscli
            apk add --update ansible
      - run:
          name: compress backend
          command: |
            tar -C ~/project/backend -czvf artifact.tar.gz .
      - run:
          name: Run ansible file
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend,scan-frontend,test-backend,scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]



